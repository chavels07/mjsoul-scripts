syntax = "proto2";

package lq;
service CustomizedContestManagerApi {
    rpc loginContestManager (ReqContestManageLogin) returns (ResContestManageLogin);
    rpc oauth2AuthContestManager (ReqContestManageOauth2Auth) returns (ResContestManageOauth2Auth);
    rpc oauth2LoginContestManager (ReqContestManageOauth2Login) returns (ResContestManageOauth2Login);
    rpc logoutContestManager (ReqCommon) returns (ResCommon);
    rpc fetchRelatedContestList (ReqCommon) returns (ResFetchRelatedContestList);
    rpc createContest (ReqCreateCustomizedContest) returns (ResCreateCustomizedContest);
    rpc deleteContest (ReqDeleteCustomizedContest) returns (ResCommon);
    rpc prolongContest (ReqProlongContest) returns (ResProlongContest);
    rpc manageContest (ReqManageContest) returns (ResManageContest);
    rpc exitManageContest (ReqCommon) returns (ResCommon);
    rpc fetchContestGameRule (ReqCommon) returns (ResFetchContestGameRule);
    rpc updateContestGameRule (ReqUpdateContestGameRule) returns (ResCommon);
    rpc searchAccountByNickname (ReqSearchAccountByNickname) returns (ResSearchAccountByNickname);
    rpc searchAccountByEid (ReqSearchAccountByEid) returns (ResSearchAccountByEid);
    rpc fetchContestPlayer (ReqCommon) returns (ResFetchCustomizedContestPlayer);
    rpc updateContestPlayer (ReqUpdateCustomizedContestPlayer) returns (ResCommon);
    rpc startManageGame (ReqCommon) returns (ResStartManageGame);
    rpc stopManageGame (ReqCommon) returns (ResCommon);
    rpc lockGamePlayer (ReqLockGamePlayer) returns (ResCommon);
    rpc unlockGamePlayer (ReqUnlockGamePlayer) returns (ResCommon);
    rpc createContestGame (ReqCreateContestGame) returns (ResCreateContestGame);
    rpc fetchContestGameRecords (ReqFetchCustomizedContestGameRecordList) returns (ResFetchCustomizedContestGameRecordList);
    rpc removeContestGameRecord (ReqRemoveContestGameRecord) returns (ResCommon);
    rpc fetchContestNotice (ReqFetchContestNotice) returns (ResFetchContestNotice);
    rpc updateContestNotice (ReqUpdateCustomizedContestNotice) returns (ResCommon);
    rpc fetchContestManager (ReqCommon) returns (ResFetchCustomizedContestManager);
    rpc updateContestManager (ReqUpdateCustomizedContestManager) returns (ResCommon);
    rpc fetchChatSetting (ReqCommon) returns (ResCustomizedContestChatInfo);
    rpc updateChatSetting (ReqUpdateCustomizedContestChatSetting) returns (ResUpdateCustomizedContestChatSetting);
    rpc updateGameTag (ReqUpdateGameTag) returns (ResCommon);
    rpc terminateGame (ReqTerminateContestGame) returns (ResCommon);
    rpc pauseGame (ReqPauseContestGame) returns (ResCommon);
    rpc resumeGame (ReqResumeContestGame) returns (ResCommon);
}

message CustomizedContest {

    optional uint32 unique_id = 1;
    optional uint32 creator_id = 2;
    optional uint32 contest_id = 3;
    optional string contest_name = 4;
    optional uint32 state = 5;
    optional uint32 create_time = 6;
    optional uint32 start_time = 7;
    optional uint32 finish_time = 8;
    optional bool open = 9;
    optional uint32 rank_rule = 10;
    optional uint32 deadline = 11;
}

message ContestGameInfo {

    optional string game_uuid = 1;
    repeated Player players = 2;
    optional uint32 start_time = 3;
    optional uint32 end_time = 4;

    message Player {

        optional uint32 account_id = 1;
        optional string nickname = 2;
    }
}

message ContestPlayerInfo {

    optional uint32 account_id = 1;
    optional string nickname = 2;
}

message ContestMatchingPlayer {

    optional uint32 account_id = 1;
    optional string nickname = 2;
    optional Controller controller = 3;

    message Controller {

        optional uint32 account_id = 1;
        optional string nickname = 2;
    }
}

message ReqContestManageLogin {

    optional string account = 1;
    optional string password = 2;
    optional bool gen_access_token = 3;
    optional uint32 type = 4;
}

message ResContestManageLogin {

    optional Error error = 1;
    optional uint32 account_id = 2;
    optional string nickname = 3;
    optional string access_token = 4;
    optional uint32 diamond = 5;
    optional uint32 last_create_time = 6;
}

message ReqContestManageOauth2Auth {

    optional uint32 type = 1;
    optional string code = 2;
    optional string uid = 3;
}

message ResContestManageOauth2Auth {

    optional Error error = 1;
    optional string access_token = 2;
}

message ReqContestManageOauth2Login {

    optional uint32 type = 1;
    optional string access_token = 2;
    optional bool reconnect = 3;
}

message ResContestManageOauth2Login {

    optional Error error = 1;
    optional uint32 account_id = 2;
    optional string nickname = 3;
    optional string access_token = 4;
    optional uint32 diamond = 5;
    optional uint32 last_create_time = 6;
}

message ContestDetailRule {

    optional uint32 init_point = 5;
    optional uint32 fandian = 6;
    optional bool can_jifei = 7;
    optional uint32 tianbian_value = 8;
    optional uint32 liqibang_value = 9;
    optional uint32 changbang_value = 10;
    optional uint32 noting_fafu_1 = 11;
    optional uint32 noting_fafu_2 = 12;
    optional uint32 noting_fafu_3 = 13;
    optional bool have_liujumanguan = 14;
    optional bool have_qieshangmanguan = 15;
    optional bool have_biao_dora = 16;
    optional bool have_gang_biao_dora = 17;
    optional bool ming_dora_immediately_open = 18;
    optional bool have_li_dora = 19;
    optional bool have_gang_li_dora = 20;
    optional bool have_sifenglianda = 21;
    optional bool have_sigangsanle = 22;
    optional bool have_sijializhi = 23;
    optional bool have_jiuzhongjiupai = 24;
    optional bool have_sanjiahele = 25;
    optional bool have_toutiao = 26;
    optional bool have_helelianzhuang = 27;
    optional bool have_helezhongju = 28;
    optional bool have_tingpailianzhuang = 29;
    optional bool have_tingpaizhongju = 30;
    optional bool have_yifa = 31;
    optional bool have_nanruxiru = 32;
    optional uint32 jingsuanyuandian = 33;
    optional int32 shunweima_2 = 34;
    optional int32 shunweima_3 = 35;
    optional int32 shunweima_4 = 36;
    optional bool bianjietishi = 37;
    optional uint32 ai_level = 38;
    optional bool have_zimosun = 39;
    optional bool disable_multi_yukaman = 40;
}

message ContestDetailRuleV2 {

    optional ContestDetailRule game_rule = 1;
    optional ExtraRule extra_rule = 2;

    message ExtraRule {

        optional uint32 required_level = 1;
        optional uint32 max_game_count = 2;
    }
}

message GameRuleSetting {

    optional uint32 round_type = 1;
    optional bool shiduan = 2;
    optional uint32 dora_count = 3;
    optional uint32 thinking_type = 4;
    optional bool use_detail_rule = 5;
    optional ContestDetailRuleV2 detail_rule_v2 = 6;
}

message ResFetchRelatedContestList {

    optional Error error = 1;
    repeated CustomizedContest contests = 2;
}

message ReqCreateCustomizedContest {

    optional string contest_name = 1;
    optional uint32 start_time = 2;
    optional uint32 finish_time = 3;
    optional bool open = 4;
    optional uint32 rank_rule = 5;
    optional GameRuleSetting game_rule_setting = 6;
}

message ResCreateCustomizedContest {

    optional Error error = 1;
    optional CustomizedContest contest = 2;
    optional uint32 diamond = 3;
}

message ReqDeleteCustomizedContest {

    optional uint32 unique_id = 1;
}

message ReqProlongContest {

    optional uint32 unique_id = 1;
}

message ResProlongContest {

    optional Error error = 1;
    optional uint32 deadline = 2;
}

message ReqManageContest {

    optional uint32 unique_id = 1;
}

message ResManageContest {

    optional Error error = 1;
    optional CustomizedContest contest = 2;
}

message ResFetchContestGameRule {

    optional Error error = 1;
    optional GameRuleSetting game_rule_setting = 2;
}

message ReqUpdateContestGameRule {

    optional string contest_name = 1;
    optional uint32 start_time = 2;
    optional uint32 finish_time = 3;
    optional bool open = 4;
    optional uint32 rank_rule = 5;
    optional GameRuleSetting game_rule_setting = 6;
}

message ReqSearchAccountByNickname {

    repeated string query_nicknames = 1;
}

message ResSearchAccountByNickname {

    optional Error error = 1;
    repeated Item search_result = 3;

    message Item {

        optional uint32 account_id = 1;
        optional string nickname = 2;
    }
}

message ReqSearchAccountByEid {

    repeated uint32 eids = 1;
}

message ResSearchAccountByEid {

    optional Error error = 1;
    repeated Item search_result = 3;

    message Item {

        optional uint32 account_id = 1;
        optional string nickname = 2;
    }
}

message ResFetchCustomizedContestPlayer {

    optional Error error = 1;
    repeated ContestPlayerInfo players = 2;
}

message ReqUpdateCustomizedContestPlayer {

    optional uint32 setting_type = 1;
    repeated string nicknames = 2;
    repeated uint32 account_ids = 3;
}

message ResUpdateCustomizedContestPlayer {

    optional Error error = 1;
    repeated uint32 failed_index = 2;
}

message ResStartManageGame {

    optional Error error = 1;
    repeated ContestMatchingPlayer players = 2;
    repeated ContestGameInfo games = 3;
}

message ReqLockGamePlayer {

    optional uint32 account_id = 1;
}

message ReqUnlockGamePlayer {

    optional uint32 account_id = 1;
}

message ReqCreateContestGame {

    repeated Slot slots = 1;
    optional string tag = 2;
    optional bool random_position = 3;
    optional bool open_live = 4;
    optional bool chat_broadcast_for_end = 5;
    optional uint32 ai_level = 6;

    message Slot {

        optional uint32 account_id = 1;
        optional uint32 start_point = 2;
        optional uint32 seat = 3;
    }
}

message ResCreateContestGame {

    optional Error error = 1;
    optional string game_uuid = 2;
}

message ReqFetchCustomizedContestGameRecordList {

    optional uint32 last_index = 2;
}

message ResFetchCustomizedContestGameRecordList {

    optional Error error = 1;
    optional uint32 next_index = 2;
    repeated Item record_list = 3;

    message Item {

        optional RecordGame record = 1;
        optional string tag = 2;
    }
}

message ReqRemoveContestGameRecord {

    optional string uuid = 1;
}

message ReqFetchContestNotice {

    repeated uint32 notice_types = 1;
}

message ResFetchContestNotice {

    optional Error error = 1;
    repeated string notices = 2;
}

message ReqUpdateCustomizedContestNotice {

    optional uint32 notice_type = 1;
    optional string content = 2;
}

message ResFetchCustomizedContestManager {

    optional Error error = 1;
    repeated ContestPlayerInfo players = 2;
}

message ReqUpdateCustomizedContestManager {

    optional uint32 setting_type = 1;
    repeated string nicknames = 2;
    repeated uint32 account_ids = 3;
}

message ResCustomizedContestChatInfo {

    optional Error error = 1;
    optional uint32 chat_limit_type = 2;
    repeated Item chat_limit_roster = 3;

    message Item {

        optional uint32 account_id = 1;
        optional string nickname = 2;
    }
}

message ReqUpdateCustomizedContestChatSetting {

    optional uint32 setting_type = 1;
    repeated string nicknames = 2;
    repeated uint32 account_ids = 3;
    optional uint32 chat_limit_type = 4;
}

message ResUpdateCustomizedContestChatSetting {

    optional Error error = 1;
    repeated uint32 failed_index = 2;
}

message ReqUpdateGameTag {

    optional string uuid = 1;
    optional string tag = 2;
}

message ReqTerminateContestGame {

    optional string uuid = 1;
}

message ReqPauseContestGame {

    optional string uuid = 1;
}

message ReqResumeContestGame {

    optional string uuid = 1;
}

message NotifyContestMatchingPlayer {

    optional uint32 unique_id = 1;
    optional uint32 type = 2;
    optional uint32 account_id = 3;
    optional string nickname = 4;
}

message NotifyContestMatchingPlayerLock {

    optional uint32 unique_id = 1;
    optional uint32 type = 2;
    optional uint32 account_id = 3;
    optional uint32 manager_id = 4;
}

message NotifyContestGameStart {

    optional uint32 unique_id = 1;
    optional ContestGameInfo game_info = 2;
}

message NotifyContestGameEnd {

    optional uint32 unique_id = 1;
    optional string game_uuid = 2;
}

message NotifyContestNoticeUpdate {

    optional uint32 unique_id = 1;
    optional uint32 notice_type = 2;
    optional string content = 3;
}

message NotifyContestManagerKick {

    optional uint32 reason = 1;
}

message Error {

    optional uint32 code = 1;
    repeated uint32 u32_params = 2;
    repeated string str_params = 3;
    optional string json_param = 4;
}

message Wrapper {

    optional string name = 1;
    optional bytes data = 2;
}

message NetworkEndpoint {

    optional string family = 1;
    optional string address = 2;
    optional uint32 port = 3;
}

message ReqCommon {
}

message ResCommon {

    optional Error error = 1;
}

message ResAccountUpdate {

    optional Error error = 1;
    optional AccountUpdate update = 2;
}

message AntiAddiction {

    optional uint32 online_duration = 1;
}

message AccountMahjongStatistic {

    repeated uint32 final_position_counts = 1;
    optional RoundSummary recent_round = 2;
    optional HuSummary recent_hu = 3;
    optional HighestHuRecord highest_hu = 4;
    optional Liqi20Summary recent_20_hu_summary = 6;
    optional LiQi10Summary recent_10_hu_summary = 7;
    repeated GameResult recent_10_game_result = 8;

    message RoundSummary {

        optional uint32 total_count = 1;
        optional uint32 rong_count = 2;
        optional uint32 zimo_count = 3;
        optional uint32 fangchong_count = 4;
    }

    message HuSummary {

        optional uint32 total_count = 1;
        optional uint32 dora_round_count = 2;
        optional uint32 total_fan = 3;
    }

    message HighestHuRecord {

        optional uint32 fanshu = 1;
        optional uint32 doranum = 2;
        optional string title = 3;
        repeated string hands = 4;
        repeated string ming = 5;
        optional string hupai = 6;
        optional uint32 title_id = 7;
    }

    message Liqi20Summary {

        optional uint32 total_count = 1;
        optional uint32 total_lidora_count = 2;
        optional uint32 average_hu_point = 3;
    }

    message LiQi10Summary {

        optional uint32 total_xuanshang = 1;
        optional uint32 total_fanshu = 2;
    }

    message GameResult {

        optional uint32 rank = 1;
        optional int32 final_point = 2;
    }
}

message AccountStatisticData {

    optional uint32 mahjong_category = 1;
    optional uint32 game_category = 2;
    optional AccountMahjongStatistic statistic = 3;
}

message AccountLevel {

    optional uint32 id = 1;
    optional uint32 score = 2;
}

message Account {

    optional uint32 account_id = 1;
    optional string nickname = 2;
    optional uint32 login_time = 3;
    optional uint32 logout_time = 4;
    optional uint32 room_id = 5;
    optional AntiAddiction anti_addiction = 6;
    optional uint32 title = 7;
    optional string signature = 8;
    optional string email = 9;
    optional uint32 email_verify = 10;
    optional uint32 gold = 11;
    optional uint32 diamond = 12;
    optional uint32 avatar_id = 13;
    optional uint32 vip = 14;
    optional int32 birthday = 15;
    optional string phone = 16;
    optional uint32 phone_verify = 17;
    repeated PlatformDiamond platform_diamond = 18;
    optional AccountLevel level = 21;
    optional AccountLevel level3 = 22;

    message PlatformDiamond {

        optional uint32 id = 1;
        optional uint32 count = 2;
    }
}

message AccountOwnerData {

    repeated uint32 unlock_characters = 1;
}

message AccountUpdate {

    repeated NumericalUpdate numerical = 1;
    optional CharacterUpdate character = 2;
    optional BagUpdate bag = 3;
    optional AchievementUpdate achievement = 4;
    optional AccountShiLian shilian = 5;
    optional DailyTaskUpdate daily_task = 6;
    optional TitleUpdate title = 7;
    repeated uint32 new_recharged_list = 8;
    optional ActivityTaskUpdate activity_task = 9;

    message NumericalUpdate {

        optional uint32 id = 1;
        optional uint32 final = 3;
    }

    message CharacterUpdate {

        repeated Character characters = 2;
        repeated uint32 skins = 3;
    }

    message AchievementUpdate {

        repeated AchievementProgress progresses = 1;
    }

    message DailyTaskUpdate {

        repeated TaskProgress progresses = 1;
    }

    message TitleUpdate {

        repeated uint32 new_titles = 1;
    }

    message ActivityTaskUpdate {

        repeated TaskProgress progresses = 1;
    }
}

message GameMetaData {

    optional uint32 room_id = 1;
    optional uint32 mode_id = 2;
    optional uint32 contest_uid = 3;
}

message AccountPlayingGame {

    optional string game_uuid = 1;
    optional uint32 category = 2;
    optional GameMetaData meta = 3;
}

message AccountCacheView {

    optional uint32 cache_version = 1;
    optional uint32 account_id = 2;
    optional string nickname = 3;
    optional uint32 login_time = 4;
    optional uint32 logout_time = 5;
    optional bool is_online = 6;
    optional uint32 room_id = 7;
    optional uint32 title = 8;
    optional uint32 avatar_id = 9;
    optional uint32 vip = 10;
    optional AccountLevel level = 11;
    optional AccountPlayingGame playing_game = 12;
    optional AccountLevel level3 = 13;
}

message PlayerBaseView {

    optional uint32 account_id = 1;
    optional uint32 avatar_id = 2;
    optional uint32 title = 3;
    optional string nickname = 4;
    optional AccountLevel level = 5;
    optional AccountLevel level3 = 6;
}

message PlayerGameView {

    optional uint32 account_id = 1;
    optional uint32 avatar_id = 2;
    optional uint32 title = 3;
    optional string nickname = 4;
    optional AccountLevel level = 5;
    optional Character character = 6;
    optional AccountLevel level3 = 7;
}

message GameMode {

    optional uint32 mode = 1;
    optional bool ai = 4;
    optional string extendinfo = 5;
    optional GameDetailRule detail_rule = 6;
    optional GameTestingEnvironmentSet testing_environment = 7;
}

message GameTestingEnvironmentSet {

    optional uint32 paixing = 1;
    optional uint32 left_count = 2;
}

message GameDetailRule {

    optional uint32 time_fixed = 1;
    optional uint32 time_add = 2;
    optional uint32 dora_count = 3;
    optional uint32 shiduan = 4;
    optional uint32 init_point = 5;
    optional uint32 fandian = 6;
    optional bool can_jifei = 7;
    optional uint32 tianbian_value = 8;
    optional uint32 liqibang_value = 9;
    optional uint32 changbang_value = 10;
    optional uint32 noting_fafu_1 = 11;
    optional uint32 noting_fafu_2 = 12;
    optional uint32 noting_fafu_3 = 13;
    optional bool have_liujumanguan = 14;
    optional bool have_qieshangmanguan = 15;
    optional bool have_biao_dora = 16;
    optional bool have_gang_biao_dora = 17;
    optional bool ming_dora_immediately_open = 18;
    optional bool have_li_dora = 19;
    optional bool have_gang_li_dora = 20;
    optional bool have_sifenglianda = 21;
    optional bool have_sigangsanle = 22;
    optional bool have_sijializhi = 23;
    optional bool have_jiuzhongjiupai = 24;
    optional bool have_sanjiahele = 25;
    optional bool have_toutiao = 26;
    optional bool have_helelianzhuang = 27;
    optional bool have_helezhongju = 28;
    optional bool have_tingpailianzhuang = 29;
    optional bool have_tingpaizhongju = 30;
    optional bool have_yifa = 31;
    optional bool have_nanruxiru = 32;
    optional uint32 jingsuanyuandian = 33;
    optional int32 shunweima_2 = 34;
    optional int32 shunweima_3 = 35;
    optional int32 shunweima_4 = 36;
    optional bool bianjietishi = 37;
    optional uint32 ai_level = 38;
    optional bool have_zimosun = 39;
    optional bool disable_multi_yukaman = 40;
    optional uint32 fanfu = 41;
    optional uint32 guyi_mode = 42;
}

message Room {

    optional uint32 room_id = 1;
    optional uint32 owner_id = 2;
    optional GameMode mode = 3;
    optional uint32 max_player_count = 4;
    repeated PlayerGameView persons = 5;
    repeated uint32 ready_list = 6;
    optional bool is_playing = 7;
    optional bool public_live = 8;
    optional uint32 robot_count = 9;
    optional uint32 tournament_id = 10;
}

message GameEndResult {

    repeated PlayerItem players = 1;

    message PlayerItem {

        optional uint32 seat = 1;
        optional int32 total_point = 2;
        optional int32 part_point_1 = 3;
        optional int32 part_point_2 = 4;
        optional int32 grading_score = 5;
        optional int32 gold = 6;
    }
}

message GameConnectInfo {

    optional string connect_token = 2;
    optional string game_uuid = 3;
    optional string location = 4;
}

message ItemGainRecord {

    optional uint32 item_id = 1;
    optional uint32 count = 2;
}

message ItemGainRecords {

    optional uint32 record_time = 1;
    optional uint32 limit_source_id = 2;
    repeated ItemGainRecord records = 3;
}

message Item {

    optional uint32 item_id = 1;
    optional uint32 stack = 2;
}

message Bag {

    repeated Item items = 1;
    repeated ItemGainRecords daily_gain_record = 2;
}

message BagUpdate {

    repeated Item update_items = 1;
    repeated ItemGainRecords update_daily_gain_record = 2;
}

message RewardSlot {

    optional uint32 id = 1;
    optional uint32 count = 2;
}

message OpenResult {

    optional RewardSlot reward = 1;
    optional RewardSlot replace = 2;
}

message RewardPlusResult {

    optional uint32 id = 1;
    optional uint32 count = 2;
    optional Exchange exchange = 3;

    message Exchange {

        optional uint32 id = 1;
        optional uint32 count = 2;
        optional uint32 exchange = 3;
    }
}

message ExecuteReward {

    optional RewardSlot reward = 1;
    optional RewardSlot replace = 2;
    optional uint32 replace_count = 3;
}

message Mail {

    optional uint32 mail_id = 1;
    optional uint32 state = 2;
    optional bool take_attachment = 3;
    optional string title = 4;
    optional string content = 5;
    repeated RewardSlot attachments = 6;
    optional uint32 create_time = 7;
    optional uint32 expire_time = 8;
    optional uint32 reference_id = 9;
}

message AchievementProgress {

    optional uint32 id = 1;
    optional uint32 counter = 2;
    optional bool achieved = 3;
    optional uint32 date = 4;
}

message AccountStatisticByGameMode {

    optional uint32 mode = 1;
    optional uint32 game_count_sum = 2;
    repeated uint32 game_final_position = 3;
    optional uint32 fly_count = 4;
    optional float gold_earn_sum = 5;
    optional uint32 round_count_sum = 6;
    optional float dadian_sum = 7;
    repeated RoundEndData round_end = 8;
    optional uint32 ming_count_sum = 9;
    optional uint32 liqi_count_sum = 10;
    optional uint32 xun_count_sum = 11;
    optional uint32 highest_lianzhuang = 12;
    optional uint32 score_earn_sum = 13;
    repeated RankScore rank_score = 14;

    message RoundEndData {

        optional uint32 type = 1;
        optional uint32 sum = 2;
    }

    message RankScore {

        optional uint32 rank = 1;
        optional int32 score_sum = 2;
        optional uint32 count = 3;
    }
}

message AccountStatisticByFan {

    optional uint32 fan_id = 1;
    optional uint32 sum = 2;
}

message AccountFanAchieved {

    optional uint32 mahjong_category = 1;
    repeated AccountStatisticByFan fan = 2;
    optional uint32 liujumanguan = 3;
}

message AccountDetailStatistic {

    repeated AccountStatisticByGameMode game_mode = 1;
    repeated AccountStatisticByFan fan = 2;
    optional uint32 liujumanguan = 3;
    repeated AccountFanAchieved fan_achieved = 4;
}

message AccountDetailStatisticByCategory {

    optional uint32 category = 1;
    optional AccountDetailStatistic detail_statistic = 2;
}

message AccountDetailStatisticV2 {

    optional AccountDetailStatistic friend_room_statistic = 1;
    optional RankStatistic rank_statistic = 2;
    optional CustomizedContestStatistic customized_contest_statistic = 3;
    optional AccountDetailStatistic leisure_match_statistic = 4;

    message RankStatistic {

        optional RankData total_statistic = 1;
        optional RankData month_statistic = 2;
        optional uint32 month_refresh_time = 3;

        message RankData {

            optional AccountDetailStatistic all_level_statistic = 1;
            repeated RankLevelData level_data_list = 2;

            message RankLevelData {

                optional uint32 rank_level = 1;
                optional AccountDetailStatistic statistic = 2;
            }
        }
    }

    message CustomizedContestStatistic {

        optional AccountDetailStatistic total_statistic = 1;
        optional AccountDetailStatistic month_statistic = 2;
        optional uint32 month_refresh_time = 3;
    }
}

message AccountShiLian {

    optional uint32 step = 1;
    optional uint32 state = 2;
}

message ClientDeviceInfo {

    optional string device_type = 1;
    optional string os = 2;
    optional string os_version = 3;
    optional string browser = 4;
}

enum GamePlayerState {

    NULL = 0;
    AUTH = 1;
    SYNCING = 2;
    READY = 3;
}

message Announcement {

    optional uint32 id = 1;
    optional string title = 2;
    optional string content = 3;
}

message TaskProgress {

    optional uint32 id = 1;
    optional uint32 counter = 2;
    optional bool achieved = 3;
    optional bool rewarded = 4;
}

message GameConfig {

    optional uint32 category = 1;
    optional GameMode mode = 2;
    optional GameMetaData meta = 3;
}

message AccountActiveState {

    optional uint32 account_id = 1;
    optional uint32 login_time = 2;
    optional uint32 logout_time = 3;
    optional bool is_online = 4;
    optional AccountPlayingGame playing = 5;
}

message Friend {

    optional PlayerBaseView base = 1;
    optional AccountActiveState state = 2;
}

message GameLiveUnit {

    optional uint32 timestamp = 1;
    optional uint32 action_category = 2;
    optional bytes action_data = 3;
}

message GameLiveSegment {

    repeated GameLiveUnit actions = 1;
}

message GameLiveSegmentUri {

    optional uint32 segment_id = 1;
    optional string segment_uri = 2;
}

message GameLiveHead {

    optional string uuid = 1;
    optional uint32 start_time = 2;
    optional GameConfig game_config = 3;
    repeated PlayerGameView players = 4;
    repeated uint32 seat_list = 5;
}

message GameNewRoundState {

    repeated uint32 seat_states = 1;
}

message GameEndAction {

    optional uint32 state = 1;
}

message GameNoopAction {
}

message CommentItem {

    optional uint32 comment_id = 1;
    optional uint32 timestamp = 2;
    optional PlayerBaseView commenter = 3;
    optional string content = 4;
}

message RollingNotice {

    optional uint32 id = 1;
    optional string content = 2;
    optional uint32 start_time = 3;
    optional uint32 end_time = 4;
    optional uint32 repeat_interval = 5;
}

message BillingGoods {

    optional string id = 1;
    optional string name = 2;
    optional string desc = 3;
    optional string icon = 4;
    optional uint32 resource_id = 5;
    optional uint32 resource_count = 6;
}

message BillShortcut {

    optional uint32 id = 1;
    optional uint32 count = 2;
    optional uint32 deal_price = 3;
}

message BillingProduct {

    optional BillingGoods goods = 1;
    optional string currency_code = 2;
    optional uint32 currency_price = 3;
    optional uint32 sort_weight = 4;
}

message Character {

    optional uint32 charid = 1;
    optional uint32 level = 2;
    optional uint32 exp = 3;
    repeated ViewSlotSet views = 4;
    optional uint32 skin = 5;
    optional bool is_upgraded = 6;
    repeated uint32 extra_emoji = 7;

    message ViewSlotSet {

        optional uint32 slot = 1;
        optional uint32 item_id = 2;
    }
}

message BuyRecord {

    optional uint32 id = 1;
    optional uint32 count = 2;
}

message ZHPShop {

    repeated uint32 goods = 1;
    repeated BuyRecord buy_records = 2;
    optional RefreshCount free_refresh = 3;
    optional RefreshCount cost_refresh = 4;

    message RefreshCount {

        optional uint32 count = 1;
        optional uint32 limit = 2;
    }
}

message MonthTicketInfo {

    optional uint32 id = 1;
    optional uint32 end_time = 2;
    optional uint32 last_pay_time = 3;
}

message ShopInfo {

    optional ZHPShop zhp = 1;
    repeated BuyRecord buy_records = 2;
    optional uint32 last_refresh_time = 3;
}

message ChangeNicknameRecord {

    optional string from = 1;
    optional string to = 2;
    optional uint32 time = 3;
}

message ServerSettings {

    optional PaymentSetting payment_setting = 3;
}

message PaymentSetting {

    optional uint32 open_payment = 1;
    optional uint32 payment_info_show_type = 2;
    optional string payment_info = 3;
    optional WechatData wechat = 4;
    optional AlipayData alipay = 5;

    message WechatData {

        optional bool disable_create = 1;
        optional uint32 payment_source_platform = 2;
        optional bool enable_credit = 3;
    }

    message AlipayData {

        optional bool disable_create = 1;
        optional uint32 payment_source_platform = 2;
    }
}

message AccountSetting {

    optional uint32 key = 1;
    optional uint32 value = 2;
}

message ChestData {

    optional uint32 chest_id = 1;
    optional uint32 total_open_count = 2;
    optional uint32 consume_count = 3;
    optional uint32 face_black_count = 4;
}

message ChestDataV2 {

    optional uint32 chest_id = 1;
    optional uint32 total_open_count = 2;
    optional uint32 face_black_count = 3;
}

message FaithData {

    optional uint32 faith_id = 1;
    optional uint32 total_open_count = 2;
    optional uint32 consume_count = 3;
}

message CustomizedContestBase {

    optional uint32 unique_id = 1;
    optional uint32 contest_id = 2;
    optional string contest_name = 3;
    optional uint32 state = 4;
    optional uint32 creator_id = 5;
    optional uint32 create_time = 6;
    optional uint32 start_time = 7;
    optional uint32 finish_time = 8;
    optional bool open = 9;
}

message CustomizedContestExtend {

    optional uint32 unique_id = 1;
    optional string public_notice = 2;
}

message CustomizedContestAbstract {

    optional uint32 unique_id = 1;
    optional uint32 contest_id = 2;
    optional string contest_name = 3;
    optional uint32 state = 4;
    optional uint32 creator_id = 5;
    optional uint32 create_time = 6;
    optional uint32 start_time = 7;
    optional uint32 finish_time = 8;
    optional bool open = 9;
    optional string public_notice = 10;
}

message CustomizedContestDetail {

    optional uint32 unique_id = 1;
    optional uint32 contest_id = 2;
    optional string contest_name = 3;
    optional uint32 state = 4;
    optional uint32 creator_id = 5;
    optional uint32 create_time = 6;
    optional uint32 start_time = 7;
    optional uint32 finish_time = 8;
    optional bool open = 9;
    optional uint32 rank_rule = 10;
    optional GameMode game_mode = 11;
    optional string private_notice = 12;
}

message CustomizedContestPlayerReport {

    optional uint32 rank_rule = 1;
    optional uint32 rank = 2;
    optional int32 point = 3;
    repeated uint32 recent_game_ranks = 4;
    optional uint32 total_game_count = 5;
}

message RecordGame {

    optional string uuid = 1;
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    optional GameConfig config = 5;
    repeated AccountInfo accounts = 11;
    optional GameEndResult result = 12;

    message AccountInfo {

        optional uint32 account_id = 1;
        optional uint32 seat = 2;
        optional string nickname = 3;
        optional uint32 avatar_id = 4;
        optional Character character = 5;
        optional uint32 title = 6;
        optional AccountLevel level = 7;
        optional AccountLevel level3 = 8;
    }
}

message CustomizedContestGameStart {

    repeated Item players = 1;

    message Item {

        optional uint32 account_id = 1;
        optional string nickname = 2;
    }
}

message CustomizedContestGameEnd {

    repeated Item players = 1;

    message Item {

        optional uint32 account_id = 1;
        optional string nickname = 2;
        optional int32 total_point = 3;
    }
}

message Activity {

    optional uint32 activity_id = 1;
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    optional string type = 4;
}

message ExchangeRecord {

    optional uint32 exchange_id = 1;
    optional uint32 count = 2;
}

message ActivityAccumulatedPointData {

    optional uint32 activity_id = 1;
    optional int32 point = 2;
    repeated uint32 gained_reward_list = 3;
}

message ActivityRankPointData {

    optional uint32 leaderboard_id = 1;
    optional int32 point = 2;
    optional bool gained_reward = 3;
    optional uint32 gainable_time = 4;
}

message GameRoundHuData {

    optional HuPai hupai = 1;
    repeated Fan fans = 2;
    optional uint32 score = 3;
    optional uint32 xun = 4;
    optional uint32 title_id = 5;
    optional uint32 fan_sum = 6;
    optional uint32 fu_sum = 7;
    optional uint32 yakuman_count = 8;
    optional uint32 biao_dora_count = 9;
    optional uint32 red_dora_count = 10;
    optional uint32 li_dora_count = 11;
    optional uint32 babei_count = 12;
    optional uint32 xuan_shang_count = 13;

    message HuPai {

        optional string tile = 1;
        optional uint32 seat = 2;
        optional uint32 liqi = 3;
    }

    message Fan {

        optional uint32 id = 1;
        optional uint32 count = 2;
        optional uint32 fan = 3;
    }
}

message GameRoundPlayerResult {

    optional uint32 type = 1;
    repeated string hands = 2;
    repeated string ming = 3;
    optional uint32 liqi_type = 4;
    optional bool is_fulu = 5;
    optional bool is_liujumanguan = 6;
    optional uint32 lian_zhuang = 7;
    optional GameRoundHuData hu = 8;
}

message GameRoundPlayer {

    optional int32 score = 1;
    optional uint32 rank = 2;
    optional GameRoundPlayerResult result = 3;
}

message GameRoundSnapshot {

    optional uint32 ju = 1;
    optional uint32 ben = 2;
    repeated GameRoundPlayer players = 3;
}

message GameFinalSnapshot {

    optional string uuid = 1;
    optional uint32 state = 2;
    optional uint32 category = 3;
    optional GameMode mode = 4;
    optional GameMetaData meta = 5;
    optional CalculateParam calculate_param = 6;
    optional uint32 create_time = 7;
    optional uint32 start_time = 8;
    optional uint32 finish_time = 9;
    repeated GameSeat seats = 10;
    repeated GameRoundSnapshot rounds = 11;
    repeated PlayerGameView account_views = 12;
    repeated FinalPlayer final_players = 13;

    message CalculateParam {

        optional uint32 init_point = 1;
        optional uint32 jingsuanyuandian = 2;
        repeated int32 rank_points = 3;
    }

    message GameSeat {

        optional uint32 type = 1;
        optional uint32 account_id = 2;
        optional NetworkEndpoint notify_endpoint = 3;
        optional string client_address = 4;
        optional bool is_connected = 5;
    }

    message FinalPlayer {

        optional uint32 seat = 1;
        optional int32 total_point = 2;
        optional int32 part_point_1 = 3;
        optional int32 part_point_2 = 4;
        optional int32 grading_score = 5;
        optional int32 gold = 6;
    }
}

message RecordCollectedData {

    optional string uuid = 1;
    optional string remarks = 2;
    optional uint32 start_time = 3;
    optional uint32 end_time = 4;
}
